import {createSlice, PayloadAction} from "@reduxjs/toolkit";
import {IUser} from "../../interfaces/IUser.ts";
import {registerUser, loginUser} from "./authActions.ts";

// define the shape of your authentication state
interface AuthSlice {
    user: IUser | null;
    accessToken: string | null;
    isAuthenticated: boolean;
    loading: boolean;
    error: string | null;
}

// Define the initial state of the authentication slice
const initialState: AuthSlice = {
    user: null,
    accessToken: null,
    isAuthenticated: false,
    loading: false,
    error: null,
}

// Create the authentication slice
const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
       setLoading(state, action: PayloadAction<boolean>) {
           state.loading = action.payload;
       },
        setError(state, action: PayloadAction<string>){
           state.error = action.payload;
        },
    },

    extraReducers: (builder) => {
        builder
            .addCase(registerUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(registerUser.fulfilled, (state, action: PayloadAction<{user: IUser, accessToken: string}>) => {
                state.user = action.payload.user;
                state.accessToken = action.payload.accessToken;
                state.isAuthenticated = true;
                state.loading = false;
                state.error = null;
            })
            .addCase(registerUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload as string;
            })

            .addCase(loginUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(loginUser.fulfilled, (state, action: PayloadAction<{user: IUser, accessToken: string}>) => {
                state.user = action.payload.user;
                state.accessToken = action.payload.accessToken;
                state.isAuthenticated = true;
                state.loading = false;
                state.error = null;
            })
            .addCase(loginUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload as string;
            })
            
    }
});


// Export the actions generated by the slice


// Export the reducer
export default authSlice.reducer;
